@page "/pages/Contacts/edit/{id:int}"
@using CleanArchitecture.Blazor.Application.Features.Contacts.Commands.Update
@using CleanArchitecture.Blazor.Application.Features.Contacts.Queries.GetById
@using CleanArchitecture.Blazor.Server.UI.Components.Fusion

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<Contacts> L
@attribute [Authorize(Policy = Permissions.Contacts.Edit)]

<PageTitle>@Title</PageTitle>
<Breadcrumbs OnSaveButtonClick="OnSubmit" Saving="_saving" BreadcrumbItems="_breadcrumbItems"></Breadcrumbs>
<MudContainer Class="mt-3" MaxWidth="MaxWidth.Small">
    @if (_updateContactCommand != null)
    {
        <MudCard Class="pa-2">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@Title</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <ActiveUserSession PageComponent="@($"{nameof(EditContact)}/{_updateContactCommand.Id}")" />
                <MudForm Model="@_updateContactCommand" @ref="_contactForm" Validation="@(Validator.ValidateValue(_updateContactCommand))">
                    <MudGrid Spacing="2">
                        <MudItem xs="12" md="6">
                            <MudTextField Label="@L[_updateContactCommand.GetMemberDescription(x => x.Name)]"
                                          @bind-Value="_updateContactCommand.Name"
                                          For="@(() => _updateContactCommand.Name)"
                                          Required="true"
                                          RequiredError="@L["name is required!"]">
                            </MudTextField>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField Label="@L[_updateContactCommand.GetMemberDescription(x => x.Description)]"
                                          For="@(() => _updateContactCommand.Description)"
                                          @bind-Value="_updateContactCommand.Description">
                            </MudTextField>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField Label="@L[_updateContactCommand.GetMemberDescription(x => x.Email)]"
                                          @bind-Value="_updateContactCommand.Email"
                                          For="@(() => _updateContactCommand.Email)"
                                          Required="false"
                                          RequiredError="@L["email is required!"]">
                            </MudTextField>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField Label="@L[_updateContactCommand.GetMemberDescription(x => x.PhoneNumber)]"
                                          @bind-Value="_updateContactCommand.PhoneNumber"
                                          For="@(() => _updateContactCommand.PhoneNumber)"
                                          Required="false"
                                          RequiredError="@L["phone number is required!"]">
                            </MudTextField>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField Label="@L[_updateContactCommand.GetMemberDescription(x => x.Country)]"
                                          @bind-Value="_updateContactCommand.Country"
                                          For="@(() => _updateContactCommand.Country)"
                                          Required="false"
                                          RequiredError="@L["country is required!"]">
                            </MudTextField>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudCardContent>
            <MudCardActions Class="d-flex justify-end gap-2">
                <MudLoadingButton Color="Color.Primary"
                                  DropShadow="false"
                                  Loading="@_saving"
                                  OnClick="OnSubmit">
                    @ConstantString.Save
                </MudLoadingButton>
            </MudCardActions>
        </MudCard>
    }
</MudContainer>

@code {
    public string? Title { get; private set; }

    [Parameter]
    public int Id { get; set; }

    private MudForm? _contactForm;
    private bool _saving = false;

    private List<BreadcrumbItem> _breadcrumbItems = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Contacts", href: "/pages/Contacts")
    };

    private UpdateContactCommand? _updateContactCommand;

    protected override async Task OnInitializedAsync()
    {
        Title = L["Edit Contact"];
        var result = await Mediator.Send(new GetContactByIdQuery() { Id = Id });
        result.Map(data =>
        {
            _updateContactCommand = Mapper.Map<UpdateContactCommand>(data);
            return data;
        }).Match(data =>
        {
            _breadcrumbItems.Add(new BreadcrumbItem(data.Name, href: $"/pages/Contacts/edit/{Id}"));
            return data;
        }, errors =>
        {
            Snackbar.Add($"{errors}", Severity.Error);
            return null!;
        });
    }

    private async Task OnSubmit()
    {
        try
        {
            _saving = true;
            await _contactForm!.Validate().ConfigureAwait(false);
            if (!_contactForm!.IsValid)
                return;
            var result = await Mediator.Send(_updateContactCommand);
            result.Match(
                data =>
                {
                    Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                    return data;
                },
                errors =>
                {
                    Snackbar.Add(errors, MudBlazor.Severity.Error);
                    return 0;
                });
        }
        finally
        {
            _saving = false;
        }
    }
}
