@page "/pages/Contacts/view/{id:int}"
@using CleanArchitecture.Blazor.Application.Features.Contacts.Commands.Delete
@using CleanArchitecture.Blazor.Application.Features.Contacts.DTOs
@using CleanArchitecture.Blazor.Application.Features.Contacts.Queries.GetById
@inherits MudComponentBase
@inject IStringLocalizer<Contacts> L
@attribute [Authorize(Policy = Permissions.Contacts.View)]
<PageTitle>@Title</PageTitle>
<Breadcrumbs OnGoEditClick="OnEditContact" OnDeleteClick="OnDeleteContact" BreadcrumbItems="_breadcrumbItems"></Breadcrumbs>
<MudContainer Class="mt-3" MaxWidth="MaxWidth.Small">
    @if (_contactDto != null)
    {
        <MudCard Class="pa-2">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@Title</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid Spacing="3" Class="readonly-grid">
                    <MudItem xs="12" md="6">
                        <ReadOnlyFieldX6 Label="@L[_contactDto.GetMemberDescription(x => x.Name)]" Value="_contactDto.Name"></ReadOnlyFieldX6>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <ReadOnlyFieldX6 Label="@L[_contactDto.GetMemberDescription(x => x.Description)]" Value="_contactDto.Description"></ReadOnlyFieldX6>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <ReadOnlyFieldX6 Label="@L[_contactDto.GetMemberDescription(x => x.Email)]" Value="_contactDto.Email"></ReadOnlyFieldX6>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <ReadOnlyFieldX6 Label="@L[_contactDto.GetMemberDescription(x => x.PhoneNumber)]" Value="_contactDto.PhoneNumber"></ReadOnlyFieldX6>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <ReadOnlyFieldX6 Label="@L[_contactDto.GetMemberDescription(x => x.Country)]" Value="_contactDto.Country"></ReadOnlyFieldX6>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
            <MudCardActions></MudCardActions>
        </MudCard>
    }
</MudContainer>

@code {
    public string? Title { get; private set; }

    [Parameter]
    public int Id { get; set; }

    private List<BreadcrumbItem> _breadcrumbItems = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Contacts", href: "/pages/Contacts")
    };

    private ContactDto? _contactDto;

    protected override async Task OnInitializedAsync()
    {
        Title = L["Contact"];
        var contactResult = await Mediator.Send(new GetContactByIdQuery() { Id = Id });
        contactResult.Map(data =>
        {
            _contactDto = data;
            return data;
        }).Match(data =>
        {
            _breadcrumbItems.Add(new BreadcrumbItem(data.Name, null, disabled: true));
            return data;
        }, errors =>
        {
            Snackbar.Add(errors, MudBlazor.Severity.Error);
            return null!;
        });
    }

    private void OnEditContact()
    {
        Navigation.NavigateTo($"/pages/Contacts/edit/{Id}");
    }

    private async Task OnDeleteContact()
    {
        var contentText = string.Format(ConstantString.DeleteConfirmation, _contactDto!.Name);
        var command = new DeleteContactCommand(new int[] { _contactDto.Id });
        await DialogServiceHelper.ShowDeleteConfirmationDialogAsync(
            command,
            ConstantString.DeleteConfirmationTitle,
            contentText,
            async () =>
            {
                await InvokeAsync(() =>
                {
                    Navigation.NavigateTo($"/pages/Contacts");
                });
            });
    }
}
