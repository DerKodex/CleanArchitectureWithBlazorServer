@page "/pages/Contacts/create"
@using CleanArchitecture.Blazor.Application.Features.Contacts.Commands.Create

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<Contacts> L
@attribute [Authorize(Policy = Permissions.Contacts.Create)]

<PageTitle>@Title</PageTitle>
<Breadcrumbs OnSaveButtonClick="OnSubmit" Saving="_saving" BreadcrumbItems="_breadcrumbItems"></Breadcrumbs>
<MudContainer Class="mt-3" MaxWidth="MaxWidth.Small">
    <MudCard Class="pa-2">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@Title</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudForm Model="@_createContactCommand" @ref="_contactForm" Validation="@(Validator.ValidateValue(_createContactCommand))">
                <MudGrid Spacing="2">
                    <MudItem xs="12" md="6">
                        <MudTextField Label="@L[_createContactCommand.GetMemberDescription(x => x.Name)]"
                                      @bind-Value="_createContactCommand.Name"
                                      For="@(() => _createContactCommand.Name)"
                                      Required="true"
                                      RequiredError="@L["name is required!"]">
                        </MudTextField>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField Label="@L[_createContactCommand.GetMemberDescription(x => x.Description)]"
                                      For="@(() => _createContactCommand.Description)"
                                      @bind-Value="_createContactCommand.Description">
                        </MudTextField>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField Label="@L[_createContactCommand.GetMemberDescription(x => x.Email)]"
                                      @bind-Value="_createContactCommand.Email"
                                      For="@(() => _createContactCommand.Email)"
                                      Required="false"
                                      RequiredError="@L["email is required!"]">
                        </MudTextField>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField Label="@L[_createContactCommand.GetMemberDescription(x => x.PhoneNumber)]"
                                      @bind-Value="_createContactCommand.PhoneNumber"
                                      For="@(() => _createContactCommand.PhoneNumber)"
                                      Required="false"
                                      RequiredError="@L["phone number is required!"]">
                        </MudTextField>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField Label="@L[_createContactCommand.GetMemberDescription(x => x.Country)]"
                                      @bind-Value="_createContactCommand.Country"
                                      For="@(() => _createContactCommand.Country)"
                                      Required="false"
                                      RequiredError="@L["country is required!"]">
                        </MudTextField>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudCardContent>
        <MudCardActions Class="d-flex justify-end gap-2">
            <MudLoadingButton Color="Color.Primary"
                              DropShadow="false"
                              Loading="@_saving"
                              OnClick="OnSubmit">
                @ConstantString.Save
            </MudLoadingButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    public string? Title { get; private set; }

    private MudForm? _contactForm;
    private bool _saving = false;
    private List<BreadcrumbItem> _breadcrumbItems = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Contacts", href: "/pages/Contacts"),
        new BreadcrumbItem("Create Contact", href: null, disabled: true)
    };

    private CreateContactCommand _createContactCommand = new();

    protected override Task OnInitializedAsync()
    {
        Title = L["Create Contact"];
        return Task.CompletedTask;
    }

    private async Task OnSubmit()
    {
        try
        {
            _saving = true;
            await _contactForm!.Validate().ConfigureAwait(false);
            if (!_contactForm!.IsValid)
                return;
            var result = await Mediator.Send(_createContactCommand);
            result.Match(
                data =>
                {
                    Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                    Navigation.NavigateTo($"/pages/Contacts");
                    return data;
                },
                errors =>
                {
                    Snackbar.Add(errors, MudBlazor.Severity.Error);
                    return -1;
                });
        }
        finally
        {
            _saving = false;
        }
    }
}
